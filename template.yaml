AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'chart-stamp lambda'

Globals:
  Function:
    Timeout: 5
    MemorySize: 128

Resources:
  # ChartStampHttpApi:
  #   Type: AWS::Serverless::HttpApi
  #   Properties:
  #     StageName: Prod
  #     # Define other properties such as CORS, Auth, etc. if needed.

  ChartStampFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:SC*
        - PolicyName: S3UploadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:aws:s3:::chart-stamp/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ChartStampFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: chartStamp/package/
      Handler: app.lambda_handler
      Role: !GetAtt ChartStampFunctionRole.Arn
      Runtime: python3.10
      Architectures:
        - x86_64
      Layers:
        - arn:aws:lambda:us-east-2:770693421928:layer:Klayers-p310-Pillow:6
      Events:
        ApiCall:
          Type: HttpApi 
          Properties:
            Path: /stamp
            Method: post

Outputs:
  HelloWorldApi:
    Description: "Endpoint for api"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/stamp"            
